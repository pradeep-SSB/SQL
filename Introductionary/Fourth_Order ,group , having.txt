Sorting and grouping:

1.ORDER BY- 
In SQL, the ORDER BY keyword is used to sort results in ascending or descending order according to the values of one or more columns.
By default ORDER BY will sort in ascending order. If you want to sort the results in descending order, you can use the DESC keyword. For example,

Sorting SIngle columns
SELECT title
FROM films
ORDER BY release_year DESC;

Sorting multiple columns- ORDER BY can also be used to sort on multiple columns. It will sort by the first column specified, then sort by the next, then the next, and so on. For example,
********** The order of columns is important!
SELECT birthdate, name
FROM people
ORDER BY birthdate, name;

2. GROUP BY-  Often you'll need to aggregate results. For example, you might want to count the number of male and female employees in your company. Here, what you want is to group all the males together and count them, and group all the females together and count them. In SQL, GROUP BY allows you to group a result by one or more columns, like so:
SELECT sex, count(*)
FROM employees
GROUP BY sex;

a. Commonly, GROUP BY is used with aggregate functions like COUNT() or MAX(). Note that GROUP BY always goes after the FROM clause!
b. A word of warning: SQL will return an error if you try to SELECT a field that is not in your GROUP BY clause without using it to calculate some kind of value about the entire group.
c. Note that you can combine GROUP BY with ORDER BY to group your results, calculate something about them, and then order your results. For example,

SELECT sex, count(*)
FROM employees
GROUP BY sex
ORDER BY count DESC;  eg-
sex	      count
female	19
male	15

NOTE-- CHECKING outputs BY RUNNING this topic
SELECT release_year, AVG(duration)
FROM films
GROUP BY release_year;

3. GROUP BY +  ORDER BY-   Make sure to always put the ORDER BY clause at the end of your query. You can't sort values that you haven't calculated yet!
SELECT release_year, country, MAX(budget)
FROM films
GROUP BY release_year,country
ORDER BY release_year, country;

4. HAVING- In SQL, aggregate functions can't be used in WHERE clauses. For example, the following query is invalid:
SELECT release_year
FROM films
GROUP BY release_year
WHERE COUNT(title) > 10;

That's where the HAVING clause comes in. For example,

SELECT release_year
FROM films
GROUP BY release_year
HAVING COUNT(title) > 10;  -->  Shows only those years in which more than 10 films were released.

5. ORDER BY + GROUP BY  +   HAVING -

question: write a query that returns the average budget and average gross earnings for films in each year after 1990, if the average budget is greater than $60 million.
SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
WHERE release_year> 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000
ORDER BY avg_gross DESC;



























































